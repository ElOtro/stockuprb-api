require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/v1/contacts", type: :request do
  let (:user) { create_user }
  let!(:company) { create :company }
  # This should return the minimal set of attributes required to create a valid
  # Contact. As you add validations to Contact, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { role: 1, title: "CFO", name: "Tom Lee", phone: "+7(812) 711-12-12", email: "tomlee@stranz.com" }
  }

  let(:invalid_attributes) {
    { role: 1, title: "CFO", name: nil, phone: "+7(812) 711-12-12", email: "tomlee@stranz.com" }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ContactsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    before do
      login_with_api(user)
    end
    it "renders a successful response" do
      company.contacts.create! valid_attributes
      get "/v1/companies/#{company.id}/contacts", headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      contact = company.contacts.create! valid_attributes
      get "/v1/companies/#{company.id}/contacts/#{contact.id}", as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Contact" do
        expect {
          post "/v1/companies/#{company.id}/contacts",
               params: { contact: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Contact, :count).by(1)
      end

      it "renders a JSON response with the new contact" do
        post "/v1/companies/#{company.id}/contacts",
             params: { contact: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Contact" do
        expect {
          post "/v1/companies/#{company.id}/contacts",
               params: { contact: invalid_attributes }, as: :json
        }.to change(Contact, :count).by(0)
      end

      it "renders a JSON response with errors for the new contact" do
        post "/v1/companies/#{company.id}/contacts",
             params: { contact: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { phone: "+7(912) 111-11-11" }
      }

      it "updates the requested contact" do
        contact = company.contacts.create! valid_attributes
        patch "/v1/companies/#{company.id}/contacts/#{contact.id}",
              params: { contact: new_attributes }, headers: valid_headers, as: :json
        contact.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the contact" do
        contact = company.contacts.create! valid_attributes
        patch "/v1/companies/#{company.id}/contacts/#{contact.id}",
              params: { contact: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the contact" do
        contact = company.contacts.create! valid_attributes
        patch "/v1/companies/#{company.id}/contacts/#{contact.id}",
              params: { contact: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested contact" do
      contact = company.contacts.create! valid_attributes
      expect {
        delete "/v1/companies/#{company.id}/contacts/#{contact.id}", headers: valid_headers, as: :json
      }.to change(Contact, :count).by(-1)
    end
  end
end
