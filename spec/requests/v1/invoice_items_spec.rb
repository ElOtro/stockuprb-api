require 'rails_helper'
require 'factory_bot_rails'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/v1/invoice_items', type: :request do
  let (:user) { create_user }
  let (:organisation) { create :organisation }
  let (:bank_account) { create :bank_account, organisation_id: organisation.id }
  let (:company) { create :company }


  let!(:agreement) do
    Agreement.create(company_id: company.id, start_at: DateTime.now() - 5.months, end_at: nil, 
                   name: "012/0303/9293")
  end

  let!(:vat_rate) do
    VatRate.create(is_active: true, rate: 20, name: "20%")
  end

  let!(:unit) do
    Unit.create(name: "pcs.")
  end

  let!(:invoice) do
    Invoice.create(organisation_id: organisation.id, bank_account_id: bank_account.id, company_id: company.id,
                   agreement_id: agreement.id)
  end

  let!(:product) do
    Product.create(is_active: true, product_type: 1, 
                   name: "Crimped Piston Accumulators",
                   description: "Parker's patented ACP Series Crimped Piston Accumulators",
                   sku: "12-12-14",
                   price: 250,
                   vat_rate_id: vat_rate.id,
                   unit_id: unit.id)
  end

  # This should return the minimal set of attributes required to create a valid
  # InvoiceItem. As you add validations to InvoiceItem, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {invoice_id: invoice.id, position: 1, product_id: product.id, description: product.description, 
     unit_id: unit.id, quantity: 2, price: product.price, amount: 2*product.price, discount_rate: 0, 
     discount: 0, vat_rate_id: product.vat_rate_id, vat: 0}
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # InvoiceItemsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    before do
      login_with_api(user)
    end
    it 'renders a successful response' do
      invoice.invoice_items.create! valid_attributes
      get "/v1/invoices/#{invoice.id}/invoice_items", headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      invoice_item = invoice.invoice_items.create! valid_attributes
      get "/v1/invoices/#{invoice.id}/invoice_items/#{invoice_item.id}", as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new InvoiceItem' do
        expect do
          post "/v1/invoices/#{invoice.id}/invoice_items",
               params: { invoice_item: valid_attributes }, headers: valid_headers, as: :json
        end.to change(InvoiceItem, :count).by(1)
      end

      it 'renders a JSON response with the new invoice_item' do
        post "/v1/invoices/#{invoice.id}/invoice_items",
             params: { invoice_item: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new InvoiceItem' do
        expect do
          post "/v1/invoices/#{invoice.id}/invoice_items",
               params: { invoice_item: invalid_attributes }, as: :json
        end.to change(InvoiceItem, :count).by(0)
      end

      it 'renders a JSON response with errors for the new invoice_item' do
        post "/v1/invoices/#{invoice.id}/invoice_items",
             params: { invoice_item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested invoice_item' do
        invoice_item = invoice.invoice_items.create! valid_attributes
        patch "/v1/invoices/#{invoice.id}/invoice_items/#{invoice_item.id}",
              params: { invoice_item: new_attributes }, headers: valid_headers, as: :json
        invoice_item.reload
        skip('Add assertions for updated state')
      end

      it 'renders a JSON response with the invoice_item' do
        invoice_item = invoice.invoice_items.create! valid_attributes
        patch "/v1/invoices/#{invoice.id}/invoice_items/#{invoice_item.id}",
              params: { invoice_item: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the invoice_item' do
        invoice_item = invoice.invoice_items.create! valid_attributes
        patch "/v1/invoices/#{invoice.id}/invoice_items/#{invoice_item.id}",
              params: { invoice_item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested invoice_item' do
      invoice_item = invoice.invoice_items.create! valid_attributes
      expect do
        delete "/v1/invoices/#{invoice.id}/invoice_items/#{invoice_item.id}", headers: valid_headers, as: :json
      end.to change(InvoiceItem, :count).by(-1)
    end
  end
end
